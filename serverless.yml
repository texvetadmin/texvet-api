service: ${file(package.json):name, 'texvet-api-v1'}
plugins:
  - serverless-domain-manager
  - serverless-offline
  - serverless-webpack

package:
  individually: true
  exclude:
    - .circleci/**
    - data/**
    - tests/**

custom:
  stage: ${opt:stage, self:provider.stage}
  defaultStage: development
  defaultRegion: us-east-1
  domains:
    development: dev-api.chatbot.texvet.org
    staging: staging-api.chatbot.texvet.org
    demo: demo-api.chatbot.texvet.org
    production: api.chatbot.texvet.org
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: npm
  serverless-offline:
    host: 0.0.0.0

provider:
  name: aws
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}
  runtime: nodejs8.10
  memorySize: 1024
  timeout: 30
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):${self:custom.defaultStage}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${self:provider.region}:*:GenerateEmailQueue"

resources:
  Resources:
    GenerateEmailQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.GENERATE_EMAIL_QUEUE_NAME}
    DeliverEmailQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.DELIVER_EMAIL_QUEUE_NAME}

functions:
  # API Functions
  api:
    handler: src/lambda.handler
    warmup: true
    events:
      - http:
          path: / # this matches the base path
          method: ANY
          cors: true
      - http:
          path: /auth/{any+} # this matches authenticated paths and will require a JWT. The token 'any' doesn't mean anything special.
          method: ANY
          cors: true
          authorizer:
            arn: ${self:provider.environment.USERPOOL_ARN}
      - http:
          path: /public/{any+} # this matches any path. The token 'any' doesn't mean anything special
          method: ANY
          cors: true

  deliverEmail:
    handler: src/handlers/SQS/index.deliverEmail
    path: fulfilments/deliver-email
    method: get
    warmup: true
    cors: true
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DeliverEmailQueue
              - Arn

  generateEmail:
    handler: src/handlers/SQS/index.generateEmail
    path: fulfilments/generate-email
    method: get
    warmup: true
    cors: true
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DeliverEmailQueue
              - Arn

  closeTheLoop:
    handler: src/handlers/fulfillment/index.closeTheLoop
    path: fulfilments/close-the-loop
    method: get
    warmup: true
    cors: true
    events:
      - schedule:
          rate: cron(0 10 * * *)
          enabled: false
